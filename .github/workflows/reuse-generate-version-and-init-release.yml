name: reuse-generate-version-and-init-release
on:
  workflow_call:
    inputs:
      prerelease:
        description: 'indicates if the release is a prerelease'
        default: true
        required: true
        type: boolean
    outputs:
      version:
        description: "Version number of the package"
        value: ${{ jobs.bump-version.outputs.version }}
        
env:
  GITHUB_TOKEN: ${{ github.token }}
  MAJOR_PATTERN: "major"
  MINOR_PATTERN: "minor"
  STAGING_IDENTIFIER: "prerelease."
  
jobs:
  bump-version-and-init-release:
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Set Staging identifier
      if: ${{ inputs.prerelease}}
      id: StagingIdentifier
      run: echo ::set-output name=tag::${{ env.STAGING_IDENTIFIER }}
        
    - name: Semantic Version Prerelease
      if: ${{ inputs.prerelease}}
      id: PrereleaseVersion
      uses: paulhatch/semantic-version@v5.0.0-alpha2
      with:
        tag_prefix: "v"
        major_pattern: ${{ env.MAJOR_PATTERN }}
        minor_pattern: ${{ env.MINOR_PATTERN }}
        format: "v${major}.${minor}.${patch}-${{ steps.StagingIdentifier.outputs.tag }}${increment}"
        version_format: "v${major}.${minor}.${patch}-${{ steps.StagingIdentifier.outputs.tag }}${increment}"
        bump_each_commit: false
        search_commit_body: true
    
    - name: Semantic Version Release
      if: ${{ !inputs.prerelease}}
      id: ReleaseVersion
      uses: paulhatch/semantic-version@v5.0.0-alpha2
      with:
        tag_prefix: "v"
        major_pattern: ${{ env.MAJOR_PATTERN }}
        minor_pattern: ${{ env.MINOR_PATTERN }}
        format: "v${major}.${minor}.${patch}"
        version_format: "v${major}.${minor}.${patch}"
        bump_each_commit: false
        search_commit_body: true
          
    # get the latest release from github before we bump the version
    - name: Get latest release before new tag
      uses: rez0n/actions-github-release@main
      id: latestRelease
      env:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        type: "stable"
        
    - name: Create Tag
      id: CreateTag
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
        git tag -a ${{ steps.PrereleaseVersion.outputs.version || steps.ReleaseVersion.outputs.version }} -m "Generated by Action"
        git push --tags
        
    - name: Build changelog
      if: ${{ inputs.prerelease }}
      id: github_release
      uses: mikepenz/release-changelog-builder-action@v3
      with:
        configurationJson: |
          {
            "categories": [
              {
                "title": "## :rocket: Features",
                "labels": ["feature"]
              },
              {
                "title": "## :bug: Fixes",
                "labels": ["fix"]
              },
              {
                "title": "## :test_tube: Tests",
                "labels": ["test"]
              },
              {
                "title": "## :pencil: Documentation",
                "labels": ["docs"]
              }
            ],
            "ignore_labels": [
              "ignore"
            ],
            "sort": "ASC",
            "template": "#{{CHANGELOG}}",
            "pr_template": "- #{{TITLE}} by #{{AUTHOR}} (#{{NUMBER}})",
            "empty_template": "- no changes",
            "max_pull_requests": 1000,
            "max_back_track_time_days": 1000
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build changelog production
      if: ${{ inputs.prerelease == false }}
      id: github_release_prod
      uses: mikepenz/release-changelog-builder-action@v3
      with:
        configurationJson: |
          {
            "categories": [
              {
                "title": "## :rocket: Features",
                "labels": ["feature"]
              },
              {
                "title": "## :bug: Fixes",
                "labels": ["fix"]
              },
              {
                "title": "## :test_tube: Tests",
                "labels": ["test"]
              },
              {
                "title": "## :pencil: Documentation",
                "labels": ["docs"]
              }
            ],
            "ignore_labels": [
              "ignore"
            ],
            "sort": "ASC",
            "template": "#{{CHANGELOG}}",
            "pr_template": "- #{{TITLE}} by #{{AUTHOR}} (#{{NUMBER}})",
            "empty_template": "- no changes",
            "max_pull_requests": 1000,
            "max_back_track_time_days": 1000
          }
        toTag: "${{ steps.ReleaseVersion.outputs.version }}"
        fromTag: "${{ steps.latestRelease.outputs.release }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
    # save the changelog to a env variable (workaround for multiline string)
    - name: Changelog choose version
      id: CustomChangelog
      run: |
        if [ "${{ inputs.prerelease }}" == "true" ]; then
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "${{ steps.github_release.outputs.changelog }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        if [ "${{ inputs.prerelease }}" == "false" ]; then
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "${{ steps.github_release_prod.outputs.changelog }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
    - name: Publish release
      id: release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "${{ steps.PrereleaseVersion.outputs.version || steps.ReleaseVersion.outputs.version }}"
        body: "${{ env.CHANGELOG }}"
        prerelease: ${{ inputs.prerelease }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check release output
      run: |
        echo release_body: "${{ env.CHANGELOG }}"
        echo release_url: "${{ steps.release.outputs.url }}"
      
    outputs:
      version: ${{ steps.PrereleaseVersion.outputs.version || steps.ReleaseVersion.outputs.version }}